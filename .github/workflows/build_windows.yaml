name: Build, test and push Windows Dockerfiles
run-name: Windows builds

on:
  push:
    paths:
      - "dockerfiles/**/windows/Dockerfile"

jobs:
  changed_dockerfiles:
    name: Get changed files
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.changed_dockerfiles.outputs.all_changed_files }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_dockerfiles
        uses: tj-actions/changed-files@v41
        with:
          json: true
          escape_json: false
          files: |2
             **/windows/Dockerfile

      - name: Show changed dockerfiles
        run: echo '${{ steps.changed_dockerfiles.outputs.all_changed_files }}'

  get_nuke_sources:
    runs-on: windows-latest
    needs: [changed_dockerfiles]
    outputs:
      unique_name: ${{ steps.artifact_name.outputs.unique_name}}
    strategy:
      matrix: 
        files: ${{ fromJSON(needs.changed_dockerfiles.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect Nuke source files
        shell: pwsh
        run: |
          $sourceFilesPath = "C:\temp\nuke_source_files"
          $targetZipPath = "C:\temp\nuke_source_files.zip"

          Write-Host "Create temp dir for source files '$sourceFilesPath'"
          New-Item -Type Directory -Path $sourceFilesPath | Out-Null

          Write-Host "Starting collecting of source files'"
          ${{ github.workspace }}\scripts\nuke_source_from_dockerfile.ps1 "${{ matrix.files }}" "$sourceFilesPath"

          Write-Host "Compressing files into zip"
          Compress-Archive -Path $sourceFilesPath -DestinationPath $targetZipPath


      - name: Set artifact name output
        id: artifact_name
        shell: pwsh
        run: |
          $artifactName = ('${{ matrix.files }}' -replace '/', '_')
          Write-Host "Got artifact name $artifactName"
          echo "unique_name=$artifactName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuke_source_files_${{ steps.artifact_name.outputs.unique_name}}
          path: C:\temp\nuke_source_files.zip

  build:
    runs-on: windows-latest
    needs: [changed_dockerfiles, get_nuke_sources]
    strategy:
      matrix: 
        files: ${{ fromJSON(needs.changed_dockerfiles.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name:  
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - uses: actions/download-artifact@v4
        with:
          name: nuke_source_files_${{ needs.get_nuke_sources.outputs.unique_name }}
          path: C:\temp

      - name: Build and export
        uses: docker/build-push-action@v5.1.0
        with:
          context: ${{ env.dockerfile_directory }}
          file: ${{ matrix.files }}
          tags: nukedockerbuild:latest
          outputs: type=docker,dest=C:\temp\nukedockerbuild.tar
          build-args: NUKE_SOURCE_FILES=nuke_source_files

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker_image_${{ needs.get_nuke_sources.outputs.unique_name }}
          path: C:\temp\nukedockerbuild.tar

  # test_build:
  #   needs: [build, get_nuke_sources]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: docker_image_${{ needs.get_nuke_sources.outputs.unique_name  }}
  #         path: /tmp/

  #     - name: Load image
  #       run: docker load --input /tmp/nukedockerbuild.tar

  #     - name: Test image
  #       run: docker run nukedockerbuild:latest bash -c "cd /usr/local/nuke_install/tests && cmake3 . -B build && cmake3 --build build"

  # deploy:
  #   needs: [test_build, get_nuke_sources]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   permissions: write-all
  #   env:
  #     PUSH_LOCATION: "ghcr.io/gillesvink/nukedockerbuild"

  #   steps:
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: docker_image_${{ needs.get_nuke_sources.outputs.unique_name  }}
  #         path: /tmp/

  #     - name: Load image
  #       run: docker load --input /tmp/nukedockerbuild.tar

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set image tag
  #       run: |
  #         NUKE_VERSION=$(docker inspect -f '{{index .Config.Labels "com.nukedockerbuild.nuke_version"}}' nukedockerbuild:latest)
  #         OPERATING_SYSTEM=$(docker inspect -f '{{index .Config.Labels "com.nukedockerbuild.operating_system"}}' nukedockerbuild:latest)
  #         VERSION=$(docker inspect -f '{{index .Config.Labels "org.opencontainers.version"}}' nukedockerbuild:latest)

  #         TAG=${NUKE_VERSION}-${OPERATING_SYSTEM}

  #         docker tag nukedockerbuild:latest ${PUSH_LOCATION}:${TAG}-${VERSION}
  #         docker tag nukedockerbuild:latest ${PUSH_LOCATION}:${TAG}-latest
  #         docker rmi nukedockerbuild:latest

  #         docker image push ${PUSH_LOCATION}:${TAG}-${VERSION}
  #         docker image push ${PUSH_LOCATION}:${TAG}-latest
