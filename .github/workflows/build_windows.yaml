name: Build, test and push Windows Dockerfiles
run-name: Windows builds

on:
  push:
    paths:
      - "dockerfiles/**/windows/Dockerfile"

jobs:
  changed_dockerfiles:
    name: Get changed files
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.changed_dockerfiles.outputs.all_changed_files }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_dockerfiles
        uses: tj-actions/changed-files@v41
        with:
          json: true
          escape_json: false
          files: |2
             **/windows/Dockerfile

      - name: Show changed dockerfiles
        run: echo '${{ steps.changed_dockerfiles.outputs.all_changed_files }}'

  get_nuke_sources:
    runs-on: windows-latest
    needs: [changed_dockerfiles]
    timeout-minutes: 30
    outputs:
      unique_name: ${{ steps.artifact_name.outputs.unique_name}}
    strategy:
      matrix: 
        files: ${{ fromJSON(needs.changed_dockerfiles.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Collect Nuke source files
        shell: pwsh
        run: |
          $sourceFilesPath = "C:\temp\nuke_source_files"
          $targetZipPath = "C:\temp\nuke_source_files.zip"

          Write-Host "Create temp dir for source files '$sourceFilesPath'"
          New-Item -Type Directory -Path $sourceFilesPath | Out-Null

          Write-Host "Starting collecting of source files'"
          ${{ github.workspace }}\scripts\nuke_source_from_dockerfile.ps1 "${{ matrix.files }}" "$sourceFilesPath"

          Write-Host "Compressing files into zip"
          Compress-Archive -Path $sourceFilesPath -DestinationPath $targetZipPath


      - name: Set artifact name output
        id: artifact_name
        shell: pwsh
        run: |
          $artifactName = ('${{ matrix.files }}' -replace '/', '_')
          Write-Host "Got artifact name $artifactName"
          echo "unique_name=$artifactName" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuke_source_files_${{ steps.artifact_name.outputs.unique_name}}
          path: C:\temp\nuke_source_files.zip

  build:
    env:
      PUSH_LOCATION: "ghcr.io/gillesvink/nukedockerbuild"
    runs-on: windows-latest
    needs: [changed_dockerfiles, get_nuke_sources]
    strategy:
      matrix: 
        files: ${{ fromJSON(needs.changed_dockerfiles.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: nuke_source_files_${{ needs.get_nuke_sources.outputs.unique_name }}
          path: C:\temp

      - name: Prepare source files
        shell: pwsh
        run: |
          $dockerfileDirectory=[System.IO.Path]::GetDirectoryName("${{ github.workspace }}\${{ matrix.files }}")
          echo "Directory set to $dockerfileDirectory"

          echo "dockerfile_directory=$dockerfileDirectory" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          Expand-Archive -Path "c:\temp\nuke_source_files.zip" -DestinationPath "$dockerfileDirectory"

      - name: Build and export
        shell: pwsh
        run: |
          cd ${{ env.dockerfile_directory }}
          docker build . --tag nukedockerbuild:latest --build-arg="NUKE_SOURCE_FILES=nuke_source_files"

      - name: Test image
        run: docker run nukedockerbuild:latest powershell -Command "cd C:\nuke_install\tests ; cmake . -B build ; cmake --build build"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        if: github.ref == 'refs/heads/main'
        run: |
          $nukeVersion=$(docker inspect -f '{{index .Config.Labels "com.nukedockerbuild.nuke_version"}}' nukedockerbuild:latest)
          $operatingSystem=$(docker inspect -f '{{index .Config.Labels "com.nukedockerbuild.operating_system"}}' nukedockerbuild:latest)
          $version=$(docker inspect -f '{{index .Config.Labels "org.opencontainers.version"}}' nukedockerbuild:latest)

          $tag=$nukeVersion-$operatingSystem

          docker tag nukedockerbuild:latest ${{ env.PUSH_LOCATION }}:$tag-$version
          docker tag nukedockerbuild:latest ${{ env.PUSH_LOCATION }}:$tag-latest
          docker rmi nukedockerbuild:latest

          docker image push ${{ env.PUSH_LOCATION }}:$tag-$version
          docker image push ${{ env.PUSH_LOCATION }}:$tag-latest

          